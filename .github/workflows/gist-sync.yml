name: Sync Private Apv.txt to Public Gist

on:
  schedule:
    - cron: '0 */6 * * *'  # Har 6 hours
  workflow_dispatch:  # Manual trigger from GitHub

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: pip install requests
    - name: Fetch from Private Approval Repo
      id: fetch
      env:
        MY_PAT_TOKEN: ${{ secrets.MY_PAT_TOKEN }}
      run: |
        python -c "
        import requests, base64, os, sys
        pat = os.getenv('MY_PAT_TOKEN')
        if not pat:
            sys.exit('No PAT')
        url = 'https://api.github.com/repos/Hassan-jinn/Approval/contents/Apv.txt'
        headers = {'Authorization': f'token {pat}', 'Accept': 'application/vnd.github.v3+json'}
        resp = requests.get(url, headers=headers)
        if resp.status_code == 200:
            content = base64.b64decode(resp.json()['content']).decode('utf-8')
            print(f'::set-output name=gist_content::{content}')
        else:
            print(f'::error::Fetch failed: {resp.status_code}')
            sys.exit(1)
        "
    - name: Update Public Gist
      env:
        MY_PAT_TOKEN: ${{ secrets.MY_PAT_TOKEN }}
        GIST_ID: b055d64699285a5600085aafca46d490  # Tumhara Gist ID
      run: |
        python -c "
        import requests, base64, os, sys
        pat = os.getenv('MY_PAT_TOKEN')
        gist_id = os.getenv('GIST_ID')
        content = '${{ steps.fetch.outputs.gist_content }}'.replace('\n', '\\n')  # Escape for JSON
        url = f'https://api.github.com/gists/{gist_id}'
        headers = {'Authorization': f'token {pat}', 'Accept': 'application/vnd.github.v3+json'}
        payload = {
            'files': {
                'apv_public.txt': {
                    'content': content
                }
            }
        }
        resp = requests.patch(url, headers=headers, json=payload)
        if resp.status_code == 200:
            print('Gist updated successfully')
        else:
            print(f'::error::Update failed: {resp.status_code}')
            sys.exit(1)
        "
